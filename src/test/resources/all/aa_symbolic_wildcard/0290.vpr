// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Ref

predicate P(r: Ref) {
  acc(r.f) &&
  Q(r.f) &&
  unfolding Q(r.f) in true
}

predicate Q(r: Ref) {true}

method test01(r: Ref) returns () {
  inhale acc(P(r))
  unfold acc(P(r), sWildcard)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}



predicate Rec(x: Ref) {
     acc(x.f, sWildcard)
  && (x.f != null ==> acc(Rec(x.f), sWildcard))
}

method test02(x: Ref) {
  inhale Rec(x)
  var y: Ref := unfolding Rec(x) in x.f
}



/* Originally reported code */

field ofs: Ref

predicate SP_State(self: Ref) {
  acc(self.ofs, write) &&
  acc(OFL_State(self.ofs), write) &&
  (unfolding acc(OFL_State(self.ofs), write) in true)
}

predicate OFL_State(self: Ref) {true}

method Router__process_data_3_3(spkt: Ref) returns ()
  requires acc(SP_State(spkt), 1/2)
  requires (unfolding acc(SP_State(spkt), sWildcard) in true )
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
