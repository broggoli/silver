// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field Nodev: Int

field Noden: Ref

field Listc: Ref

function Nodelen(this: Ref): Int
  requires this != null
  requires acc(Nodeinv(this), sWildcard)
  ensures result > 0
{
  (unfolding acc(Nodeinv(this), sWildcard) in (this.Noden == null ? 1 : 1 + Nodelen(this.Noden)))
}

function Nodeget(this: Ref, i: Int): Int
  requires this != null
  requires acc(Nodeinv(this), sWildcard) && (0 <= i) && (i < Nodelen(this))
{
  (unfolding acc(Nodeinv(this), sWildcard) in (i == 0 ? this.Nodev : Nodeget(this.Noden, i - 1)))
}

function Listlen(this: Ref): Int
  requires this != null
  requires acc(Listinv(this), sWildcard)
  ensures result >= 0
{
  (unfolding acc(Listinv(this), sWildcard) in (this.Listc == null ? 0 : Nodelen(this.Listc)))
}

predicate Nodeinv(this: Ref) {
  acc(this.Nodev, write) && acc(this.Noden, write) && ((this.Noden != null) ==> acc(Nodeinv(this.Noden), write))
}

predicate Listinv(this: Ref) {
  acc(this.Listc, write) && ((this.Listc != null) ==> acc(Nodeinv(this.Listc), write))
}
